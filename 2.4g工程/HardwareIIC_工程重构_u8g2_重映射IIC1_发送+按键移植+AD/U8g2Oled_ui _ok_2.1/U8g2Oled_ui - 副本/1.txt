x轴运动完y轴运动测试
int8_t x,x_trg;
int8_t y = 10,y_trg = 10;//初始值相同，ui_run才不会自动逼近
uint8_t state;           //状态值
int8_t ui_run(int8_t *a, int8_t *a_trg)//运动逼近函数，到达目标值返回1，否则返回0
{
    if(*a < *a_trg) *a += 1;
    else if(*a > *a_trg) *a = -1;
    else    return 1;
    return 0;
}
int main(void)
{
    uint8_t i;
    LED_Init();
    Key_Init();
    
    OLED12864_IoInit();                         //IIC OLED 端口初始化
    
    //u8g2初始化
    u8g2_t u8g2;
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8g2_gpio_and_delay_stm32);
    u8g2_InitDisplay(&u8g2);
    u8g2_SetPowerSave(&u8g2, 0);
    //u8g2初始化
    u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);                         //设置字体
    x_trg = 64;//x目标值给64
    
    while (1)
    {
       
        if(ui_run(&x, &x_trg))//x轴到达目标了
        {
            if(state == 0)
            {
                state = 1; //置标志位
                y_trg = 16;//给y设置目标
            }
        }
        if(ui_run(&y, &y_trg))//y轴到达目标了
        {
            if(state == 1)
            {
                state = 2;//置标志位
            }
        }
        u8g2_ClearBuffer(&u8g2);                                             //清空缓冲区       
        u8g2_DrawStr(&u8g2,x, y,"Hello World!");                            //显示字符串
        u8g2_DrawStr(&u8g2,x - 128, y, "Hello World!");                     //显示字符串

        u8g2_SendBuffer(&u8g2);                                             //发送缓冲区
        Delay_ms(20);

    }
}
-------------------------------------------------------------------------------------------------
垂直运动测试
int8_t x,x_trg;
int8_t y = 10,y_trg = 10;//初始值相同，ui_run才不会自动逼近
uint8_t state;           //状态值
int8_t ui_run(int8_t *a, int8_t *a_trg)//运动逼近函数，到达目标值返回1，否则返回0
{
    if(*a < *a_trg) *a += 1;
    else if(*a > *a_trg) *a = -1;
    else    return 1;
    return 0;
}
int main(void)
{
    uint8_t i;
    LED_Init();
    Key_Init();
    
    OLED12864_IoInit();                         //IIC OLED 端口初始化
    
    //u8g2初始化
    u8g2_t u8g2;
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8g2_gpio_and_delay_stm32);
    u8g2_InitDisplay(&u8g2);
    u8g2_SetPowerSave(&u8g2, 0);
    //u8g2初始化
    u8g2_SetFont(&u8g2,u8g2_font_ncenB08_tr);                         //设置字体
    y_trg = 64;//x目标值给64
    
    while (1)
    {
        ui_run(&y, &y_trg);                                                 //y轴到达目标了

        u8g2_ClearBuffer(&u8g2);                                           //清空缓冲区       
        u8g2_DrawStr(&u8g2,x, y,"Hello");                                  //显示字符串
        u8g2_DrawStr(&u8g2,x, y + 16,"Hello");                             //显示字符串
        u8g2_DrawStr(&u8g2,x, y + 32,"Hello");                              //显示字符串
        u8g2_SendBuffer(&u8g2);                                             //发送缓冲区
        Delay_ms(20);

    }
}
--------------------------------------------------------------------------------------------------------------

按键测试
void Key_Init(void)
{
 	GPIO_InitTypeDef GPIO_InitStructure;
 
 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB,ENABLE);//使能PORTA,PORTE时钟

	GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_13|GPIO_Pin_6;//KEY0-KEY2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; //设置成上拉输入
 	GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化GPIOE2,3,4

}
uint8_t get_io_val(uint8_t ch)
{
    if(ch == 0) 
    {
        if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0)
        {
            Delay_ms(20);
             if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 0)
            {
                 return 0;
            }
        }
        else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1)
        {
            Delay_ms(20);
             if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_6) == 1)
            {
                 return 1;
            }
        }
    }
    else  
    {
         if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 0)
        {
            Delay_ms(20);
             if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 0)
            {
                 return 0;
            }
        }
        else if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 1)
        {
            Delay_ms(20);
             if (GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) == 1)
            {
                 return 1;
            }
        }
        
    }
}
uint8_t keynum1;
uint8_t keynum2;
        u8g2_ClearBuffer(&u8g2);                                           //清空缓冲区       
        keynum1 = get_io_val(0);
        keynum2 = get_io_val(1);
        PrintfVarFormat(&u8g2, 0,20,u8g2_font_ncenB14_tr, keynum1);//显示i
        PrintfVarFormat(&u8g2, 0,40,u8g2_font_ncenB14_tr, keynum2);//显示i
        u8g2_SendBuffer(&u8g2);                                             //发送缓冲区
-----------------------------------------------------------------------------------------------------